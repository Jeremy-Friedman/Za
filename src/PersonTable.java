import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.util.Iterator;

public class PersonTable
{
    public enum State {
        ALABAMA("AL"), ALASKA("AK"), ARIZONA("AZ"), ARKANSAS("AR"), CALIFORNIA("CA"),
        COLORADO("CO"), CONNECTICUT("CT"), DELAWARE("DE"), FLORIDA("FL"), GEORGIA("GA"),
        HAWAII("HI"), IDAHO("ID"), ILLINOIS("IL"), INDIANA("IN"), IOWA("IA"),
        KANSAS("KS"), KENTUCKY("KY"), LOUISIANA("LA"), MAINE("ME"), MARYLAND("MD"),
        MASSACHUSETTS("MA"), MICHIGAN("MI"), MINNESOTA("MN"), MISISSIPPI("MS"), MISSOURI("MO"),
        MONTANA("MT"), NEBRASKA("NE"), NEVADA("NV"), NEW_HAMPSHIRE("NH"), NEW_JERSEY("NJ"),
        NEW_MEXICO("NM"), NEW_YORK("NY"), NORTH_CAROLINA("NC"), NORTH_DAKOTA("ND"), OHIO("OH"),
        OKLAHOMA("OK"), OREGON("OR"), PENNSYLVANIA("PA"), RHODE_ISLAND("RI"), SOUTH_CAROLINA("SC"),
        SOUTH_DAKOTA("SD"), TENNESSEE("TN"), TEXAS("TX"), UTAH("UT"), VERMONT("VT"),
        VIRGINIAA("VA"), WASHINGTON("WA"), WEST_VIRGINIA("WV"), WISCONSIN("WI"), WYOMING("WY");
        
        private final String abbrev;
        private State(String abbrev) { this.abbrev = abbrev; }
        public String abbrev() { return abbrev; }
    }
    
    public static void createPersonTable(Connection conn)
    {
        try
        {
            String query =  "CREATE TABLE IF NOT EXISTS Person (" +
                            "  personid      IDENTITY CHECK >= 0," +
                            "  first_name    VARCHAR(256) NOT NULL," +
                            "  middle_name   VARCHAR(256)," +
                            "  last_name     VARCHAR(256) NOT NULL," +
                            "  date_of_birth DATE," +
                            "  username      VARCHAR(256) UNIQUE NOT NULL," +
                            "  password_hash BINARY(64) NOT NULL," +
                            "  password_salt BINARY(64) NOT NULL," +
                            "  street        VARCHAR(256)," +
                            "  city          VARCHAR(256)," +
                            "  state         CHAR(2)," +
                            "  zip           VARCHAR(10)," +
                            "  PRIMARY KEY (personid)" +
                            ");";
            
            Statement stmt = conn.createStatement();
            stmt.execute(query);
            
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    public static long insertPerson(Connection conn, Person person) throws SQLException
    {
        /*
         * notice that no value for personid is specified
         * it is generated by the database
         */
        PreparedStatement ps = conn.prepareStatement(
            "INSERT INTO Person (first_name, middle_name, last_name, date_of_birth, username, password_hash, " +
            "password_salt, street, city, state, zip) VALUES (?,?,?,?,?,?,?,?,?,?,?)", new String[]{ "personid" });
        ps.setString(1, person.first_name);
        ps.setString(2, person.middle_name);
        ps.setString(3, person.last_name);
        ps.setDate(4, person.date_of_birth);
        ps.setString(5, person.username);
        ps.setBytes(6, person.password_hash);
        ps.setBytes(7, person.password_salt);
        ps.setString(8, person.street);
        ps.setString(9, person.city);
        ps.setString(10, person.state);
        ps.setString(11, person.zip);
        ps.executeUpdate();
        ResultSet generatedKeys = ps.getGeneratedKeys();
        generatedKeys.next();
        long personid = generatedKeys.getLong(1);
        return personid;
    }
    
    public static ResultSet queryPersonTable(Connection conn, ArrayList<String> columns, ArrayList<String> whereClauses)
    {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT ");
        
        if(columns.isEmpty()) sb.append("* ");
        else
        {
            Iterator<String> columnIt = columns.iterator();
            while (columnIt.hasNext())
            {
                String column = columnIt.next();
                sb.append(column);
                if (columnIt.hasNext()) sb.append(", ");
                else sb.append(" ");
            }
        }
        
        sb.append("FROM Person");
        
        if(!whereClauses.isEmpty())
        {
            sb.append(" WHERE ");
            Iterator<String> whereIt = whereClauses.iterator();
            while (whereIt.hasNext())
            {
                String clause = whereIt.next();
                sb.append(clause);
                if (whereIt.hasNext()) sb.append(" AND ");
            }
        }
        
        sb.append(";");
        System.out.println("Here's the query: " + sb.toString());
        
        try
        {
            Statement stmt = conn.createStatement();
            return stmt.executeQuery(sb.toString());
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return null;
    }
    
    public static void printPersonTable(Connection conn)
    {
        String query = "SELECT * FROM Person;";
        try
        {
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(query);
            
            while(result.next())
            {
                Person person = new Person();
                person.personid = result.getLong(1);
                person.first_name = result.getString(2);
                person.middle_name = result.getString(3);
                person.last_name = result.getString(4);
                person.date_of_birth = result.getDate(5);
                person.username = result.getString(6);
                person.password_hash = result.getBytes(7);
                person.password_salt = result.getBytes(8);
                person.street = result.getString(9);
                person.city = result.getString(10);
                person.state = result.getString(11);
                person.zip = result.getString(12);
                
                System.out.println(person);
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
}
